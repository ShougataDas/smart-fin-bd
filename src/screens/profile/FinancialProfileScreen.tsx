import React, { useState } from 'react';
import {
    View,
    ScrollView,
    StyleSheet,
    KeyboardAvoidingView,
    Platform,
    Alert,
} from 'react-native';
import {
    TextInput,
    Button,
    Text,
    Card,
    SegmentedButtons,
    Surface,
    ProgressBar,
    Chip,
} from 'react-native-paper';
import { useForm, Controller } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import { useNavigation } from '@react-navigation/native';

import { theme, spacing } from '@/constants/theme';
import { useUserStore } from '@/store/userStore';
import { FinancialProfileForm, EmploymentType, IncomeStability } from '@/types';
import { formatCurrency } from '@/utils/formatters';

const profileSchema = yup.object().shape({
    monthlyIncome: yup
        .number()
        .min(1000, '‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶Ü‡¶Ø‡¶º ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßß‡ß¶‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá')
        .max(10000000, '‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶Ü‡¶Ø‡¶º ‡ßß ‡¶ï‡ßã‡¶ü‡¶ø ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶®‡¶æ')
        .required('‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶Ü‡¶Ø‡¶º ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï'),
    monthlyExpenses: yup
        .number()
        .min(500, '‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶ñ‡¶∞‡¶ö ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß´‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá')
        .test('expenses-less-than-income', '‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶ñ‡¶∞‡¶ö ‡¶Ü‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶ï‡¶Æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá', function (value) {
            return value < this.parent.monthlyIncome;
        })
        .required('‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶ñ‡¶∞‡¶ö ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï'),
    currentSavings: yup
        .number()
        .min(0, '‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º ‡ß¶ ‡¶¨‡¶æ ‡¶§‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá')
        .required('‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï'),
    dependents: yup
        .number()
        .min(0, '‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶∂‡ßÄ‡¶≤ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡ß¶ ‡¶¨‡¶æ ‡¶§‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá')
        .max(20, '‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶∂‡ßÄ‡¶≤ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡ß®‡ß¶ ‡¶ú‡¶®‡ßá‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶®‡¶æ')
        .required('‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶∂‡ßÄ‡¶≤ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï'),
});

export const FinancialProfileScreen: React.FC = () => {
    const navigation = useNavigation();
    const { updateFinancialProfile, isLoading, user } = useUserStore();
    const [currentStep, setCurrentStep] = useState(1);
    const totalSteps = 4;

    const {
        control,
        handleSubmit,
        watch,
        formState: { errors, isValid },
        trigger,
    } = useForm<FinancialProfileForm>({
        resolver: yupResolver(profileSchema),
        mode: 'onChange',
        defaultValues: {
            monthlyIncome: 0,
            monthlyExpenses: 0,
            currentSavings: 0,
            dependents: 0,
            employmentType: EmploymentType.PRIVATE,
            incomeStability: IncomeStability.STABLE,
        },
    });

    const watchedValues = watch();
    const monthlySavings = watchedValues.monthlyIncome - watchedValues.monthlyExpenses;

    const employmentOptions = [
        { value: EmploymentType.GOVERNMENT, label: '‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø', icon: 'bank' },
        { value: EmploymentType.PRIVATE, label: '‡¶¨‡ßá‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø', icon: 'office-building' },
        { value: EmploymentType.BUSINESS, label: '‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ', icon: 'store' },
        { value: EmploymentType.FREELANCE, label: '‡¶´‡ßç‡¶∞‡¶ø‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏', icon: 'laptop' },
        { value: EmploymentType.STUDENT, label: '‡¶õ‡¶æ‡¶§‡ßç‡¶∞/‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ', icon: 'school' },
        { value: EmploymentType.RETIRED, label: '‡¶Ö‡¶¨‡¶∏‡¶∞‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§', icon: 'account-clock' },
    ];

    const incomeStabilityOptions = [
        { value: IncomeStability.STABLE, label: '‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤', description: '‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶Ü‡¶Ø‡¶º' },
        { value: IncomeStability.VARIABLE, label: '‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶∂‡ßÄ‡¶≤', description: '‡¶Ü‡¶Ø‡¶º ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º' },
        { value: IncomeStability.IRREGULAR, label: '‡¶Ö‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§', description: '‡¶Ü‡¶Ø‡¶º ‡¶Ö‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ì ‡¶Ö‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§' },
    ];

    const onSubmit = async (data: FinancialProfileForm) => {
        try {
            await updateFinancialProfile(data);
            Alert.alert(
                '‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶∏‡¶´‡¶≤',
                '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶∞‡ßç‡¶•‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§',
                [
                    {
                        text: '‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá',
                        onPress: () => navigation.navigate('RiskAssessment' as never),
                    },
                ]
            );
        } catch (error) {
            Alert.alert(
                '‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•',
                '‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
                [{ text: '‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá' }]
            );
        }
    };

    const handleNext = async () => {
        const fieldsToValidate = getFieldsForStep(currentStep);
        const isStepValid = await trigger(fieldsToValidate);

        if (isStepValid) {
            if (currentStep < totalSteps) {
                setCurrentStep(currentStep + 1);
            } else {
                handleSubmit(onSubmit)();
            }
        }
    };

    const handlePrevious = () => {
        if (currentStep > 1) {
            setCurrentStep(currentStep - 1);
        }
    };

    const getFieldsForStep = (step: number): (keyof FinancialProfileForm)[] => {
        switch (step) {
            case 1:
                return ['monthlyIncome'];
            case 2:
                return ['monthlyExpenses'];
            case 3:
                return ['currentSavings', 'dependents'];
            case 4:
                return ['employmentType', 'incomeStability'];
            default:
                return [];
        }
    };

    const renderStep1 = () => (
        <Card style={styles.stepCard}>
            <Card.Content>
                <View style={styles.stepHeader}>
                    <Icon name="currency-bdt" size={40} color={theme.colors.primary} />
                    <Text variant="headlineSmall" style={styles.stepTitle}>
                        ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶Ü‡¶Ø‡¶º
                    </Text>
                    <Text variant="bodyMedium" style={styles.stepDescription}>
                        ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶Æ‡ßã‡¶ü ‡¶Ü‡¶Ø‡¶º ‡¶ï‡¶§? (‡¶∏‡¶¨ ‡¶â‡ßé‡¶∏ ‡¶•‡ßá‡¶ï‡ßá)
                    </Text>
                </View>

                <Controller
                    control={control}
                    name="monthlyIncome"
                    render={({ field: { onChange, onBlur, value } }) => (
                        <TextInput
                            label="‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶Ü‡¶Ø‡¶º (‡¶ü‡¶æ‡¶ï‡¶æ)"
                            value={value ? value.toString() : ''}
                            onChangeText={(text) => onChange(parseInt(text) || 0)}
                            onBlur={onBlur}
                            error={!!errors.monthlyIncome}
                            keyboardType="numeric"
                            left={<TextInput.Icon icon="currency-bdt" />}
                            style={styles.input}
                        />
                    )}
                />
                {errors.monthlyIncome && (
                    <Text variant="bodySmall" style={styles.errorText}>
                        {errors.monthlyIncome.message}
                    </Text>
                )}

                {watchedValues.monthlyIncome > 0 && (
                    <Surface style={styles.infoCard}>
                        <Text variant="bodyMedium" style={styles.infoText}>
                            üí° ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶Ü‡¶Ø‡¶º: {formatCurrency(watchedValues.monthlyIncome)}
                        </Text>
                    </Surface>
                )}
            </Card.Content>
        </Card>
    );

    const renderStep2 = () => (
        <Card style={styles.stepCard}>
            <Card.Content>
                <View style={styles.stepHeader}>
                    <Icon name="cart" size={40} color={theme.colors.secondary} />
                    <Text variant="headlineSmall" style={styles.stepTitle}>
                        ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶ñ‡¶∞‡¶ö
                    </Text>
                    <Text variant="bodyMedium" style={styles.stepDescription}>
                        ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶Æ‡ßã‡¶ü ‡¶ñ‡¶∞‡¶ö ‡¶ï‡¶§? (‡¶∏‡¶¨ ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶ñ‡¶∞‡¶ö)
                    </Text>
                </View>

                <Controller
                    control={control}
                    name="monthlyExpenses"
                    render={({ field: { onChange, onBlur, value } }) => (
                        <TextInput
                            label="‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶ñ‡¶∞‡¶ö (‡¶ü‡¶æ‡¶ï‡¶æ)"
                            value={value ? value.toString() : ''}
                            onChangeText={(text) => onChange(parseInt(text) || 0)}
                            onBlur={onBlur}
                            error={!!errors.monthlyExpenses}
                            keyboardType="numeric"
                            left={<TextInput.Icon icon="cart" />}
                            style={styles.input}
                        />
                    )}
                />
                {errors.monthlyExpenses && (
                    <Text variant="bodySmall" style={styles.errorText}>
                        {errors.monthlyExpenses.message}
                    </Text>
                )}

                {watchedValues.monthlyExpenses > 0 && monthlySavings >= 0 && (
                    <Surface style={styles.infoCard}>
                        <Text variant="bodyMedium" style={styles.infoText}>
                            üí∞ ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ: {formatCurrency(monthlySavings)}
                        </Text>
                        <Text variant="bodySmall" style={styles.infoSubtext}>
                            (‡¶Ü‡¶Ø‡¶º - ‡¶ñ‡¶∞‡¶ö = ‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º)
                        </Text>
                    </Surface>
                )}
            </Card.Content>
        </Card>
    );

    const renderStep3 = () => (
        <Card style={styles.stepCard}>
            <Card.Content>
                <View style={styles.stepHeader}>
                    <Icon name="piggy-bank" size={40} color={theme.colors.tertiary} />
                    <Text variant="headlineSmall" style={styles.stepTitle}>
                        ‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º ‡¶ì ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞
                    </Text>
                    <Text variant="bodyMedium" style={styles.stepDescription}>
                        ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º ‡¶ì ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶§‡¶•‡ßç‡¶Ø
                    </Text>
                </View>

                <Controller
                    control={control}
                    name="currentSavings"
                    render={({ field: { onChange, onBlur, value } }) => (
                        <TextInput
                            label="‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶û‡ßç‡¶ö‡¶Ø‡¶º (‡¶ü‡¶æ‡¶ï‡¶æ)"
                            value={value ? value.toString() : ''}
                            onChangeText={(text) => onChange(parseInt(text) || 0)}
                            onBlur={onBlur}
                            error={!!errors.currentSavings}
                            keyboardType="numeric"
                            left={<TextInput.Icon icon="piggy-bank" />}
                            style={styles.input}
                        />
                    )}
                />
                {errors.currentSavings && (
                    <Text variant="bodySmall" style={styles.errorText}>
                        {errors.currentSavings.message}
                    </Text>
                )}

                <Controller
                    control={control}
                    name="dependents"
                    render={({ field: { onChange, onBlur, value } }) => (
                        <TextInput
                            label="‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶∂‡ßÄ‡¶≤ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ"
                            value={value ? value.toString() : ''}
                            onChangeText={(text) => onChange(parseInt(text) || 0)}
                            onBlur={onBlur}
                            error={!!errors.dependents}
                            keyboardType="numeric"
                            left={<TextInput.Icon icon="account-group" />}
                            style={styles.input}
                            helperText="‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶Ø‡¶º‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶∂‡ßÄ‡¶≤"
                        />
                    )}
                />
                {errors.dependents && (
                    <Text variant="bodySmall" style={styles.errorText}>
                        {errors.dependents.message}
                    </Text>
                )}
            </Card.Content>
        </Card>
    );

    const renderStep4 = () => (
        <Card style={styles.stepCard}>
            <Card.Content>
                <View style={styles.stepHeader}>
                    <Icon name="briefcase" size={40} color={theme.colors.primary} />
                    <Text variant="headlineSmall" style={styles.stepTitle}>
                        ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶§‡¶•‡ßç‡¶Ø
                    </Text>
                    <Text variant="bodyMedium" style={styles.stepDescription}>
                        ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ß‡¶∞‡¶® ‡¶ì ‡¶Ü‡¶Ø‡¶º‡ßá‡¶∞ ‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤‡¶§‡¶æ
                    </Text>
                </View>

                <Text variant="titleMedium" style={styles.sectionTitle}>
                    ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®
                </Text>
                <View style={styles.optionsGrid}>
                    {employmentOptions.map((option) => (
                        <Controller
                            key={option.value}
                            control={control}
                            name="employmentType"
                            render={({ field: { onChange, value } }) => (
                                <Chip
                                    selected={value === option.value}
                                    onPress={() => onChange(option.value)}
                                    style={styles.optionChip}
                                    icon={option.icon}>
                                    {option.label}
                                </Chip>
                            )}
                        />
                    ))}
                </View>

                <Text variant="titleMedium" style={styles.sectionTitle}>
                    ‡¶Ü‡¶Ø‡¶º‡ßá‡¶∞ ‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤‡¶§‡¶æ
                </Text>
                {incomeStabilityOptions.map((option) => (
                    <Controller
                        key={option.value}
                        control={control}
                        name="incomeStability"
                        render={({ field: { onChange, value } }) => (
                            <Surface
                                style={[
                                    styles.stabilityOption,
                                    value === option.value && styles.selectedOption,
                                ]}
                                onTouchEnd={() => onChange(option.value)}>
                                <View style={styles.stabilityContent}>
                                    <Text variant="titleMedium" style={styles.stabilityTitle}>
                                        {option.label}
                                    </Text>
                                    <Text variant="bodySmall" style={styles.stabilityDescription}>
                                        {option.description}
                                    </Text>
                                </View>
                                {value === option.value && (
                                    <Icon name="check-circle" size={24} color={theme.colors.primary} />
                                )}
                            </Surface>
                        )}
                    />
                ))}
            </Card.Content>
        </Card>
    );

    const renderCurrentStep = () => {
        switch (currentStep) {
            case 1:
                return renderStep1();
            case 2:
                return renderStep2();
            case 3:
                return renderStep3();
            case 4:
                return renderStep4();
            default:
                return renderStep1();
        }
    };

    return (
        <KeyboardAvoidingView
            style={styles.container}
            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>
            <ScrollView
                contentContainerStyle={styles.scrollContent}
                showsVerticalScrollIndicator={false}>

                {/* Progress Header */}
                <Surface style={styles.progressHeader} elevation={2}>
                    <Text variant="titleLarge" style={styles.progressTitle}>
                        ‡¶Ü‡¶∞‡ßç‡¶•‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤
                    </Text>
                    <Text variant="bodyMedium" style={styles.progressSubtitle}>
                        ‡¶ß‡¶æ‡¶™ {currentStep} / {totalSteps}
                    </Text>
                    <ProgressBar
                        progress={currentStep / totalSteps}
                        color={theme.colors.primary}
                        style={styles.progressBar}
                    />
                </Surface>

                {/* Current Step */}
                {renderCurrentStep()}

                {/* Navigation Buttons */}
                <View style={styles.navigationContainer}>
                    {currentStep > 1 && (
                        <Button
                            mode="outlined"
                            onPress={handlePrevious}
                            style={styles.previousButton}
                            icon="arrow-left">
                            ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ
                        </Button>
                    )}

                    <Button
                        mode="contained"
                        onPress={handleNext}
                        loading={isLoading}
                        disabled={isLoading}
                        style={styles.nextButton}
                        icon={currentStep === totalSteps ? "check" : "arrow-right"}>
                        {currentStep === totalSteps ? '‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®' : '‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ'}
                    </Button>
                </View>
            </ScrollView>
        </KeyboardAvoidingView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: theme.colors.background,
    },
    scrollContent: {
        flexGrow: 1,
        padding: spacing.md,
    },
    progressHeader: {
        padding: spacing.lg,
        marginBottom: spacing.lg,
        borderRadius: theme.roundness,
        backgroundColor: theme.colors.surface,
    },
    progressTitle: {
        textAlign: 'center',
        fontWeight: 'bold',
        color: theme.colors.onSurface,
    },
    progressSubtitle: {
        textAlign: 'center',
        color: theme.colors.onSurfaceVariant,
        marginTop: spacing.xs,
        marginBottom: spacing.md,
    },
    progressBar: {
        height: 6,
        borderRadius: 3,
    },
    stepCard: {
        marginBottom: spacing.lg,
    },
    stepHeader: {
        alignItems: 'center',
        marginBottom: spacing.lg,
    },
    stepTitle: {
        fontWeight: 'bold',
        color: theme.colors.onSurface,
        marginTop: spacing.md,
        marginBottom: spacing.sm,
    },
    stepDescription: {
        textAlign: 'center',
        color: theme.colors.onSurfaceVariant,
        paddingHorizontal: spacing.md,
    },
    input: {
        marginBottom: spacing.sm,
        backgroundColor: theme.colors.surface,
    },
    errorText: {
        color: theme.colors.error,
        marginBottom: spacing.sm,
        marginLeft: spacing.sm,
    },
    infoCard: {
        padding: spacing.md,
        marginTop: spacing.md,
        borderRadius: theme.roundness,
        backgroundColor: theme.colors.primaryContainer,
    },
    infoText: {
        color: theme.colors.onPrimaryContainer,
        fontWeight: 'bold',
    },
    infoSubtext: {
        color: theme.colors.onPrimaryContainer,
        opacity: 0.8,
        marginTop: spacing.xs,
    },
    sectionTitle: {
        marginTop: spacing.lg,
        marginBottom: spacing.md,
        fontWeight: 'bold',
        color: theme.colors.onSurface,
    },
    optionsGrid: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        marginBottom: spacing.lg,
    },
    optionChip: {
        margin: spacing.xs,
    },
    stabilityOption: {
        flexDirection: 'row',
        alignItems: 'center',
        padding: spacing.md,
        marginBottom: spacing.sm,
        borderRadius: theme.roundness,
        backgroundColor: theme.colors.surfaceVariant,
    },
    selectedOption: {
        backgroundColor: theme.colors.primaryContainer,
    },
    stabilityContent: {
        flex: 1,
    },
    stabilityTitle: {
        fontWeight: 'bold',
        color: theme.colors.onSurface,
    },
    stabilityDescription: {
        color: theme.colors.onSurfaceVariant,
        marginTop: spacing.xs,
    },
    navigationContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        marginTop: spacing.lg,
    },
    previousButton: {
        flex: 1,
        marginRight: spacing.sm,
    },
    nextButton: {
        flex: 1,
        marginLeft: spacing.sm,
    },
});

